// 가로 길이가 2이고 세로의 길이가 1인 직사각형의 타일이 있습니다. 이 직사각형 타일을 이용해 
// 세로의 길이가 2이고 가로의 길이가 n인 바닥을 가득 채우려고 합니다. 타일은 가로나 세로로 배
// 치할 수 있습니다. 예를 들어 n = 7이면 이 타일로 이렇게 채울 수 있습니다.
// 직사각형의 가로의 길이 n이 주어질 때 직사각형을 채우는 방법의 수를 반환하는 solution( ) 함
// 수를 완성해주세요.
// 제약 
	
// 조건
// • 가로의 길이 n은 60,000 이하의 자연수입니다.
// • 경우의 수가 많아질 수 있으므로 경우의 수를 1,000,000,007로 나눈 나머지를 반환하세요.
// 입출력의 예
// n result
// 4 5
// 프로토타입
// C++
// long long solution(int n)

// 가로길이 - 2 세로길이  | 1
// 세로길이 2 가로길이 n 인 직사각형을 채우는데 경우의수를 1000007 로 나눠라?
// 나모른다 ㅋㅋ


// 동적계획법
// 작은 문제의 해답이 큰문제의 해당
// n =1
// 한개를 세로로 놓으면 됨   |
// n =2 
// 두개를 세로로 놓는경우  || 두개를 가로로 놓는 경우 
// n =3
// 한개세로로 놓고 두개를 가로로 놓으면됨 |= =| ||| 세가지경우

// n=3 일때는 1 번의 경우와 2번의 경우를 합친거라고..
// n = 4 면 그럼 네개가 되는건가? 경우의수니까 말은되네. 
// |||| ||= =|| == 네가지인가. 말은되네
#include <vector>
#include <iostream>
using namespace std;

long long solution(int n)
{
    if (n == 1)
    {
        return 1;
    }

    if (n == 2) 
    {
        return 2;
    }

    vector<long long> dp(n + 1, 0);

    dp[1] = 0;
    dp[2] = 2;

    for (int i = 3; i <=n; i++) 
    {
        dp[i] = (dp[i-1] + dp[i -2]) % 1000000007;
    }

    return dp[n];
}

void main()
{
    int n = 4;
    int answer = solution(n);
    cout << "answer:" << answer << endl;
    
}

